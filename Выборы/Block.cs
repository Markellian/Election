//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Выборы
{
    using System;
    using System.Collections.Generic;
    using System.Security.Cryptography;
    using System.Text;

    public partial class Block
    {
        public int Id { get; set; }
        public Nullable<int> User_id { get; set; }
        public System.DateTime DateCreated { get; set; }
        public Nullable<int> Option_id { get; set; }
        public string Hash { get; set; }
        public string PreviousHash { get; set; }
        public int Election_id { get; set; }
    
        public virtual Election Election { get; set; }
        public virtual User User { get; set; }

        public Block() { }
        /// <summary>
        /// Конструктор генезис-блока. Создает первый блок.
        /// </summary>
        public Block(Election election)
        {
            User_id = null;
            DateCreated = election.DateStart.ToUniversalTime();
            Option_id = null;
            PreviousHash = election.Name;
            Hash = MakeHash();
        }
        /// <summary>
        /// Создание нового блока
        /// </summary>
        /// <param name="user">Идентификатор пользователя</param>
        /// <param name="candidate">кандидат, за которого отдан голос</param>
        /// <param name="block">последний блок</param>
        public Block(User user, Block block, int option_id)
        {
            if (block == null)
            {
                throw new ArgumentException("Пустой блок", nameof(block));
            }
            User_id = user.Id;
            DateCreated = DateTime.UtcNow;
            Option_id = option_id;
            Election_id = block.Election_id;
            PreviousHash = block.Hash;
            Hash = MakeHash();

        }
        /// <summary>
        /// Генерация строки для создания хэша
        /// </summary>
        /// <returns>строка для создания хэша</returns>
        private string GetStringForHash()
        {
            string text = "";
            text += User_id.ToString();
            text += DateCreated.ToString("G");
            text += Option_id.ToString();
            text += Election_id.ToString();
            text += PreviousHash;
            return text;
        }
        /// <summary>
        /// Создание хэша для текущего блока
        /// </summary>
        /// <returns></returns>
        public string MakeHash()
        {
            string hash = GetStringForHash();

            byte[] bytes = Encoding.Unicode.GetBytes(hash);
            byte[] result = new SHA256Managed().ComputeHash(bytes);

            string hashString = string.Empty;
            foreach (byte x in result)
            {
                hashString += String.Format("{0:x2}", x);
            }

            return hashString;
        }
    }
}
